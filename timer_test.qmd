---
title: Quarto Timer
subtitle: Working examples
filters:
  - timer
format:
   letterbox-revealjs:
    theme: custom.scss
    progress: false
    menu: true
    width: 1400
    height: 720
    slide-number: true
    preview-links: auto
    touch: true
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: false
---

## Extension

This extension provides two methods to add timers to your slides.

- JavaScript
- LUA

This might be helpful, if, for example, you want your audience to think about a specific topic for 5 minutes.

## Installation

In RStudio terminal enter the following to download and add extension to the current project:

```{terminal}
$ quarto add produnis/quarto-timer
 
```

Go ahead and do it now. You have 15 seconds.

::: {.timer #TimerInstall seconds=15}
:::

## JavaScript and LUA usage

Following installation you can embed timers into pages in two ways.

- JavaScript
- LUA

Using LUA is generally cleaner in markdown but both methods will be shown.

## Customization

You can change two features of timers individually:

- How long they will last
- When they will be active:
  - From the start of a `presentation`
  - When the `slide` is visible
  - On `interaction`, clicking on the timer

## JavaScript usage

To add a timer, add the code snippet into your `qmd` file:

```{javascript}
<div id="UNIQUE-ID"></div>
<script src="_extensions/timer/timer.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        initializeTimer("UNIQUE-ID", SECONDS, STARTON); 
    });
</script>
```

Customize the `UNIQUE-ID`, `SECONDS`, and `STARTON`, as below:
```{javascript}
<div id="Timer0"></div>
<script src="_extensions/timer/timer.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        initializeTimer("Timer0", 60, "slide"); 
    });
</script>
```


## JavaScript usage

Here's a working JavaScript example, added with the following code:

```{javascript}
<div id="Timer1"></div>
<script src="_extensions/timer/timer.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        initializeTimer("Timer1", 240, "presentation"); 
    });
</script>
```

<div id="Timer1" style="float:left; margin-top: 0.5em"></div>
<!-- <script src="_extensions/timer/timer.js"></script> -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        initializeTimer("Timer1", 240, "presentation"); 
    });
</script>

This timer started when the presentation started and lasts 4 minutes (240 seconds).


## LUA usage

Adding a timer with LUA takes the following form:

```{markdown}
::: {.timer #UNIQUE-ID seconds=300 starton=slide}
:::
```

Customize the `UNIQUE-ID` and set the `seconds` and `starton`.

NOTE: `starton` can have the values:

- `presentation`
- `slide`
- `interaction`

## LUA example

The default timer can be as simple as the following:

```{markdown}
::: {.timer #Timer2}
:::
```

Appearing as the following:

::: {.timer #Timer2}
:::

The default is 5 minutes (300 seconds) and active only when the slide is in focus.

## More LUA examples

You can use as many timers on your slides as you want, as long as a unique `UNIQUE-ID` is used for each.

```{markdown}
::: {.timer #Timer3 seconds=60}
:::
::: {.timer #Timer4 seconds=60 starton=presentation}
:::
::: {.timer #Timer5 seconds=60 starton=interaction}
:::
 
```

<div style="float: left; margin-top: 0.5em">
::: {.timer #Timer3 seconds=60}
:::
</div>
<div style="float: left; margin-top: 0.5em">
::: {.timer #Timer4 seconds=60 starton=presentation}
:::
</div>
<div style="float: left; margin-top: 0.5em">
::: {.timer #Timer5 seconds=60 starton=interaction}
:::
</div>
